import { Markup } from 'telegraf';
import { inject, injectable } from 'inversify';
import { APP_TOKENS } from '../../container/tokens';
import { DaDataService } from '../../domains/dadata/dadata.service';
import { UserService } from '../../domains/user/user.service';
import { TG_SCENES, TG_TRIGGERS } from '../telegram-bot-triggers';
import { CommonTemplate } from '../templates/common-template';
import { TelegramBotSceneHandler } from '../common/telegram-bot-scene-handler/telegram-bot-scene-handler';
import { ITgContext } from '../common/telegram-bot.interface';
import { ConflictException } from '../../common/exceptions/exceptions';
import { TGError } from '../errors/tg-error.class';
import { ProfileTemplate } from '../templates/profile-template';
import { IDDAddress } from '../../domains/dadata/dadata.interface';

interface IState {
	unverifiedAddress?: IDDAddress;
	waitEnterAddress: boolean;
}

const CANCEL_BUTTON = '–û—Ç–º–µ–Ω–∞';
const MANUAL_BUTTON = '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é';
const GEOLOCATION_BUTTON = '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π';
const REQUEST_FOR_CALL_BUTTON = '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';

@injectable()
export class AddAddressScene extends TelegramBotSceneHandler {
	private mainMarkup = Markup.keyboard([
		[{ text: GEOLOCATION_BUTTON, request_location: true }, { text: MANUAL_BUTTON }],
		[{ text: CANCEL_BUTTON }],
	]).resize();

	private cancelMarkup = Markup.keyboard([[{ text: CANCEL_BUTTON }]]).resize();

	private cancelAndCallMarkup = Markup.keyboard([
		[{ text: CANCEL_BUTTON }, { text: REQUEST_FOR_CALL_BUTTON }],
	]).resize();

	private locationConfirmMarkup = Markup.inlineKeyboard([
		{ text: '–î–∞', callback_data: `${TG_TRIGGERS.ConfirmAddress}` },
		{ text: '–ù–µ—Ç', callback_data: TG_TRIGGERS.RejectAddress },
	]);

	constructor(
		@inject(APP_TOKENS.DaDataService) readonly daDataService: DaDataService,
		@inject(APP_TOKENS.UserService) readonly userService: UserService,
	) {
		super(TG_SCENES.AddAddress);

		this.scene.enter(async (ctx) => {
			await ctx.reply(CommonTemplate.getAddressRequest(), this.mainMarkup);
		});

		this.scene.hears(CANCEL_BUTTON, async (ctx) => {
			await ctx.deleteMessage(ctx.message?.message_id);
			await this.leaveAndRemove(ctx, 'üòâ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–∑–∂–µ.');
		});

		this.scene.hears(MANUAL_BUTTON, async (ctx) => {
			this.patchState<IState>(ctx, { waitEnterAddress: true });
			await ctx.deleteMessage(ctx.message?.message_id);
			await ctx.reply(
				'–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –∞–¥—Ä–µ—Å.\n–í —Ñ–æ—Ä–º–∞—Ç–µ: –≥.–ú–æ—Å–∫–≤–∞, —É–ª.–ú–æ—Ö–æ–≤–∞—è, –¥.15',
				this.cancelMarkup,
			);
		});

		this.scene.hears(REQUEST_FOR_CALL_BUTTON, async (ctx) => {
			await ctx.deleteMessage(ctx.message?.message_id);
			await this.leaveAndRemove(ctx, 'üòä –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.');
		});

		this.scene.on('location', async (ctx) => {
			const address = await this.daDataService.getAddressByLocation(ctx.message.location);

			if (address) {
				this.patchState<IState>(ctx, { unverifiedAddress: address });
				await ctx.reply(
					`–≠—Ç–æ –≤–∞—à –∞–¥—Ä–µ—Å? \n ${ProfileTemplate.getAddress(address)}`,
					this.locationConfirmMarkup,
				);
			} else {
				await this.createAddress(ctx, address);
			}
		});

		this.scene.action(TG_TRIGGERS.ConfirmAddress, async (ctx) => {
			const { unverifiedAddress } = this.getState<IState>(ctx) || {};

			if (unverifiedAddress) {
				await this.createAddress(ctx, unverifiedAddress);
			} else {
				await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å');
			}
		});

		this.scene.action(TG_TRIGGERS.RejectAddress, async (ctx) => {
			this.patchState<IState>(ctx, { unverifiedAddress: undefined });
			await ctx.deleteMessage();
			await ctx.reply('‚òπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é');
		});

		this.scene.on('text', async (ctx) => {
			const state = this.getState<IState>(ctx);

			if (state?.waitEnterAddress) {
				const address = await this.daDataService.getAddressFromString(ctx.message.text);
				await this.createAddress(ctx, address);
			} else {
				await ctx.reply(CommonTemplate.getUndefinedCommand());
			}
		});
	}

	private async createAddress(
		ctx: ITgContext,
		address: { city: string; street: string; house: string } | null,
	): Promise<void> {
		if (!address) {
			await ctx.reply(
				'‚òπÔ∏è –ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã  –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–≥ —Å –≤–∞–º–∏  —Å–≤—è–∑–∞—Ç—å—Å—è',
				this.cancelAndCallMarkup,
			);
			return;
		}

		try {
			await this.userService.createUserAddressByTgId(ctx.from!.id, address);
			this.patchState<IState>(ctx, { unverifiedAddress: undefined });
		} catch (e) {
			if (e instanceof ConflictException) {
				throw new TGError('ü§® –≠—Ç–æ—Ç –∞–¥—Ä–µ—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω');
			}
			throw e;
		}

		await this.leaveAndRemove(ctx, 'üòâ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å!');
	}
}
