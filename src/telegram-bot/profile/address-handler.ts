import { inject, injectable } from 'inversify';
import { plainToClass } from 'class-transformer';
import { TG_BOT_TOKENS } from '../di/tokens';
import { ProfileScene } from './profile-actions';
import { APP_TOKENS } from '../../common/di/tokens';
import { SceneContext } from 'telegraf/typings/scenes';
import { CommonTemlate } from '../common/common-template';
import { ProfileReplyService } from './profile-reply-service';
import { ICityService } from '../../city/city.service.interface';
import { IUserService } from '../../user/user.service.interface';
import { CreateAddressDto } from '../../address/dto/create-address-dto';
import { IAddressService } from '../../address/address.service.interface';
import { TelegramBotMatchedContext } from '../core/telegram-bot-context.interface';
import { TelegramBotSceneHandler } from '../core/telegram-bot-scene-handler/telegram-bot-scene-handler';

interface IAddressEditoState {
	step: number;
	city?: string;
	street?: string;
	house?: string;
}

interface IAddAddressScenarioStep {
	key: string;
	question: string;
	validation?: (value: string) => Promise<string | null>;
}

@injectable()
export class AddAddressHandler extends TelegramBotSceneHandler {
	private scenario = new Map<number, IAddAddressScenarioStep>();

	constructor(
		@inject(APP_TOKENS.CityService) private cityService: ICityService,
		@inject(APP_TOKENS.UserService) private userService: IUserService,
		@inject(APP_TOKENS.AddressService) private addressService: IAddressService,
		@inject(TG_BOT_TOKENS.ProfileReplyService) private profileReplyService: ProfileReplyService,
	) {
		super(ProfileScene.AddAddress);
		this.initScenarios();

		this.scene.enter((ctx) => {
			this.setState<IAddressEditoState>(ctx, this.getInitialState());
			const scenario = this.scenario.get(1);

			if (scenario) {
				ctx.reply(scenario.question);
			}
		});

		this.scene.hears(ProfileScene.AddAddresCancel, async (ctx) => {
			await ctx.reply('–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞', {
				reply_markup: {
					remove_keyboard: true,
				},
			});
			await ctx.scene.leave();
		});

		this.scene.on('text', async (ctx) => {
			this.handleScenario(ctx);
		});
	}

	private getInitialState(): IAddressEditoState {
		return { step: 1 };
	}

	private async handleScenario(
		ctx: TelegramBotMatchedContext<SceneContext, 'text'>,
	): Promise<void> {
		const answer = ctx.message.text;
		const state = this.getState<IAddressEditoState>(ctx);
		const currentScenario = this.scenario.get(state.step);

		if (!currentScenario) {
			// –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ª–æ–≥–∏—Ä—É–µ–º
			ctx.scene.leave();
			return;
		}

		if (currentScenario.validation) {
			const error = await currentScenario.validation(answer);
			if (error) {
				await ctx.reply(error, {
					reply_markup: {
						keyboard: [[{ text: ProfileScene.AddAddresCancel }]],
					},
				});
				return;
			}
		}

		const nextStep = state.step + 1;
		const nextScenario = this.scenario.get(nextStep);
		this.patchState<IAddressEditoState>(ctx, { [currentScenario.key]: answer, step: nextStep });

		if (nextScenario) {
			await ctx.reply(nextScenario.question);
		} else {
			const { city, street, house } = state;

			if (city && street && house) {
				await this.createAddress(ctx.from.id, {
					city,
					street,
					house,
				});

				await ctx.reply('üî• –û–≥–æ–Ω—å! –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –≤–∞—à–µ–º—É –∞–¥—Ä–µ—Å—É');
				await ctx.reply(CommonTemlate.getHelp());
				await ctx.scene.leave();
			} else {
				ctx.reply('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
			}
		}
	}

	private async createAddress(
		tgId: number,
		addressParams: { city: string; street: string; house: string },
	): Promise<void> {
		const user = await this.userService.findByTgId(tgId);

		if (user) {
			const address = plainToClass(CreateAddressDto, {
				userId: user.id,
				city: addressParams.city,
				street: addressParams.street,
				house: addressParams.house,
			});

			await this.addressService.create(address);
		}
	}

	private initScenarios(): void {
		this.scenario.set(1, {
			key: 'city',
			question: '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥',
			validation: async (value: string) => {
				const city = await this.cityService.findByName(value);
				return city
					? null
					: 'üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –ø–æ–∫–∞ –∫ –≤–∞–º –Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ, –Ω–∞–¥–µ–µ–º—Å—è, —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ —Ä–∞—Å—à–∏—Ä–∏–º –∑–æ–Ω—É. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø–æ–∫–∏–Ω—É—Ç—å —Ñ–æ—Ä–º—É.';
			},
		});

		this.scenario.set(2, {
			key: 'street',
			question: '–í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É',
			validation: async (value: string) => {
				return value.length > 2
					? null
					: 'ü§î –ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ –¥–≤—É—Ö —Å–∏–º–≤–æ–ª–æ–≤.';
			},
		});

		this.scenario.set(3, {
			key: 'house',
			question: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞',
		});
	}
}
